{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Downloads/development-challenge-master 2/ui/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/table.jsx\";\nimport { Container, Button } from \"@material-ui/core\";\nimport formatCurrency from \"./utils/formatCurrency\";\nimport { getUsers } from \"./services/users.js\";\nimport { getApplications } from \"./services/applications.js\";\nimport { getPayments, createPayment } from \"./services/payments.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  /**\n   * Hydrate data for the table and set state for users, applications, and payments\n   */\n  const [users, setUsers] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      const [usersData, applicationsData, paymentsData] = await Promise.all([getUsers(), getApplications(), getPayments()]);\n      setUsers(usersData.body);\n      setApplications(applicationsData.body);\n      setPayments(paymentsData.body);\n      setDataLoaded(true);\n    }\n\n    fetchData();\n  }, []);\n\n  const initiatePayment = async ({\n    applicationUuid,\n    requestedAmount\n  }) => {\n    console.log(applicationUuid, requestedAmount, 'consoled -------'); // const { body } = await createPayment({\n    //   applicationUuid,\n    //   requestedAmount,\n    // });\n    // setPayments([...payments, body]);\n  };\n\n  let tableData = [];\n\n  if (dataLoaded) {\n    tableData = users.map(({\n      uuid,\n      name,\n      email\n    }) => {\n      const {\n        requestedAmount,\n        uuid: applicationUuid\n      } = applications.find(application => application.userUuid === uuid) || {};\n      const {\n        paymentAmount,\n        paymentMethod\n      } = payments.find(payment => payment.applicationUuid === applicationUuid) || {}; // Format table data to be passed into the table component, pay button tacked\n      // onto the end to allow payments to be issued for each row\n\n      return {\n        uuid,\n        name,\n        email,\n        requestedAmount: formatCurrency(requestedAmount),\n        paymentAmount: formatCurrency(paymentAmount),\n        paymentMethod // initiatePayment: !paymentAmount ? (\n        //   <Button\n        //     onClick={() =>\n        //       initiatePayment({\n        //         applicationUuid,\n        //         requestedAmount,\n        //       })\n        //     }\n        //     variant=\"contained\"\n        //   >\n        //     Pay\n        //   </Button>\n        // ) : null,\n\n      };\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: dataLoaded && /*#__PURE__*/_jsxDEV(Table, {\n        data: tableData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 33\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"sKVM6M5rYXjQfW8bF2Mtk4p0i24=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/macbookpro/Downloads/development-challenge-master 2/ui/src/App.jsx"],"names":["React","useState","useEffect","Table","Container","Button","formatCurrency","getUsers","getApplications","getPayments","createPayment","App","users","setUsers","applications","setApplications","payments","setPayments","dataLoaded","setDataLoaded","fetchData","usersData","applicationsData","paymentsData","Promise","all","body","initiatePayment","applicationUuid","requestedAmount","console","log","tableData","map","uuid","name","email","find","application","userUuid","paymentAmount","paymentMethod","payment"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Table from \"./components/table.jsx\";\nimport { Container, Button } from \"@material-ui/core\";\nimport formatCurrency from \"./utils/formatCurrency\";\n\nimport { getUsers } from \"./services/users.js\";\nimport { getApplications } from \"./services/applications.js\";\nimport { getPayments, createPayment } from \"./services/payments.js\";\n\nconst App = () => {\n  /**\n   * Hydrate data for the table and set state for users, applications, and payments\n   */\n  const [users, setUsers] = useState([]);\n  const [applications, setApplications] = useState([]);\n  const [payments, setPayments] = useState([]);\n  const [dataLoaded, setDataLoaded] = useState(false);\n  useEffect(() => {\n    async function fetchData() {\n      const [usersData, applicationsData, paymentsData] = await Promise.all([\n        getUsers(),\n        getApplications(),\n        getPayments(),\n      ]);\n\n      setUsers(usersData.body);\n      setApplications(applicationsData.body);\n      setPayments(paymentsData.body);\n      setDataLoaded(true);\n    }\n    fetchData();\n  }, []);\n\n  const initiatePayment = async ({ applicationUuid, requestedAmount }) => {\n    console.log(applicationUuid, requestedAmount, 'consoled -------')\n    // const { body } = await createPayment({\n    //   applicationUuid,\n    //   requestedAmount,\n    // });\n    // setPayments([...payments, body]);\n  };\n\n  let tableData = [];\n  if (dataLoaded) {\n    tableData = users.map(({ uuid, name, email }) => {\n      const { requestedAmount, uuid: applicationUuid } =\n        applications.find((application) => application.userUuid === uuid) || {};\n      const { paymentAmount, paymentMethod } =\n        payments.find(\n          (payment) => payment.applicationUuid === applicationUuid\n        ) || {};\n\n      // Format table data to be passed into the table component, pay button tacked\n      // onto the end to allow payments to be issued for each row\n      return {\n        uuid,\n        name,\n        email,\n        requestedAmount: formatCurrency(requestedAmount),\n        paymentAmount: formatCurrency(paymentAmount),\n        paymentMethod,\n        // initiatePayment: !paymentAmount ? (\n        //   <Button\n        //     onClick={() =>\n        //       initiatePayment({\n        //         applicationUuid,\n        //         requestedAmount,\n        //       })\n        //     }\n        //     variant=\"contained\"\n        //   >\n        //     Pay\n        //   </Button>\n        // ) : null,\n      };\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>{dataLoaded && <Table data={tableData} />}</Container>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
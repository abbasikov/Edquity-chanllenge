{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Downloads/development-challenge-master 2/ui/src/components/table.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport { TablePagination } from '@material-ui/core';\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14\n  }\n}))(TableCell);\nconst StyledTableRow = withStyles(theme => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover\n    }\n  }\n}))(TableRow);\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700\n  }\n});\nexport default function CustomizedTables({\n  data\n}) {\n  _s();\n\n  const classes = useStyles();\n  console.log(data, 'this is the data');\n  const headers = data.reduce((output, entry) => {\n    const result = output;\n    Object.keys(entry).map(key => {\n      if (!result.includes(key)) result.push(key);\n    });\n    return result;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(TableContainer, {\n    component: Paper,\n    children: /*#__PURE__*/_jsxDEV(Table, {\n      className: classes.table,\n      \"aria-label\": \"customized table\",\n      children: [/*#__PURE__*/_jsxDEV(TableHead, {\n        children: /*#__PURE__*/_jsxDEV(TableRow, {\n          children: headers.map(key => {\n            return /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: // Convert camelcased values to uppercased values to be used as\n              // dynamic headers\n              key.replace(/([A-Z])/g, \" $1\").replace(/^./, function (str) {\n                return str.toUpperCase();\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n        children: data.map(row => /*#__PURE__*/_jsxDEV(StyledTableRow, {\n          children: headers.map(key => {\n            return /*#__PURE__*/_jsxDEV(StyledTableCell, {\n              children: row[key]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 24\n            }, this);\n          })\n        }, row.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomizedTables, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = CustomizedTables;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomizedTables\");","map":{"version":3,"sources":["/Users/macbookpro/Downloads/development-challenge-master 2/ui/src/components/table.jsx"],"names":["React","withStyles","makeStyles","Table","TablePagination","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","root","action","hover","useStyles","table","minWidth","CustomizedTables","data","classes","console","log","headers","reduce","output","entry","result","Object","keys","map","key","includes","push","replace","str","toUpperCase","row","name"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport { TablePagination } from '@material-ui/core';\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles((theme) => ({\n  root: {\n    \"&:nth-of-type(odd)\": {\n      backgroundColor: theme.palette.action.hover,\n    },\n  },\n}))(TableRow);\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n});\n\nexport default function CustomizedTables({ data }) {\n  const classes = useStyles();\n  console.log(data, 'this is the data')\n  const headers = data.reduce((output, entry) => {\n    const result = output;\n    Object.keys(entry).map((key) => {\n      if (!result.includes(key)) result.push(key);\n    });\n    return result;\n  }, []);\n\n  return (\n    <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"customized table\">\n        <TableHead>\n          <TableRow>\n            {headers.map((key) => {\n              return (\n                <StyledTableCell>\n                  {\n                    // Convert camelcased values to uppercased values to be used as\n                    // dynamic headers\n                    key\n                      .replace(/([A-Z])/g, \" $1\")\n                      .replace(/^./, function (str) {\n                        return str.toUpperCase();\n                      })\n                  }\n                </StyledTableCell>\n              );\n            })}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((row) => (\n            <StyledTableRow key={row.name}>\n              {headers.map((key) => {\n                return <StyledTableCell>{row[key]}</StyledTableCell>;\n              })}\n            </StyledTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}